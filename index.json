{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Code Documentation | UDPChat",
    "keywords": "Code Documentation This is the documentation for the source code of this project. Autogenerated from XML comments in the source code using DocFX. Available classes Client - Contains the client logic. Server - Contains the server logic. Lib - Contains the shared code between the client and the server. How to generate the documentation Install DocFX. See here for more information. (Optional) Install wkhtmltopdf for PDF generation. Run docfx metadata docfx_project/docfx.json && docfx build docfx_project/docfx.json from the root of the repository. (Optional) Run docfx metadata docfx_project/docfx.json && docfx pdf docfx_project/docfx.json to generate a PDF version of the documentation. The generated documentation will be in the docfx_project/ folder, more specifically: docfx_project/_site/ for the HTML documentation. docfx_project/_site_pdf/ for the PDF version of the documentation."
  },
  "api/UdpChat.Client.ChatClient.html": {
    "href": "api/UdpChat.Client.ChatClient.html",
    "title": "Class ChatClient | UDPChat",
    "keywords": "Class ChatClient Namespace UdpChat.Client Assembly UdpChat.Client.dll A ChatClient is a client for the chat system. public class ChatClient Inheritance object ChatClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatClient(int, string, int) Initializes a new instance of the ChatClient class with the specified client port and central server IP and port. public ChatClient(int clientPort = 4000, string centralServerIP = \"127.0.0.1\", int centralServerPort = 5000) Parameters clientPort int The port number to use for the client. centralServerIP string The IP address of the central server. centralServerPort int The port number to use for the central server. Exceptions ArgumentException Thrown if the receive socket's local endpoint is null. Fields user public ChatUser? user Field Value ChatUser ChatUser instance representing this ChatClient Methods PingCentralServer() Pings the central server to check if it is reachable public bool PingCentralServer() Returns bool true if the central server can be reached, false if not SendAuthRequest(string, string, RequestType) Sends a an auth request of type Request.RequestType to the central server. public void SendAuthRequest(string username, string password, Request.RequestType type) Parameters username string password string type Request.RequestType SendMessage(string) Sends a message if the user is logged in to the central server. public void SendMessage(string msg) Parameters msg string"
  },
  "api/UdpChat.Client.ClientCLI.html": {
    "href": "api/UdpChat.Client.ClientCLI.html",
    "title": "Class ClientCLI | UDPChat",
    "keywords": "Class ClientCLI Namespace UdpChat.Client Assembly UdpChat.Client.dll The ClientCLI class is a command line interface for the client. It is used to create a ChatClient instance with default or custom settings. See Client CLI Documentation for more information. public class ClientCLI Inheritance object ClientCLI Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "api/UdpChat.Client.html": {
    "href": "api/UdpChat.Client.html",
    "title": "Namespace UdpChat.Client | UDPChat",
    "keywords": "Namespace UdpChat.Client Classes ChatClient A ChatClient is a client for the chat system. ClientCLI The ClientCLI class is a command line interface for the client. It is used to create a ChatClient instance with default or custom settings. See Client CLI Documentation for more information."
  },
  "api/UdpChat.Lib.ChatMessage.html": {
    "href": "api/UdpChat.Lib.ChatMessage.html",
    "title": "Class ChatMessage | UDPChat",
    "keywords": "Class ChatMessage Namespace UdpChat.Lib Assembly UdpChat.Lib.dll A ChatMessage is a message sent by a user to the server. It has a user, a timestamp, and a message. [Serializable] public class ChatMessage : ChatSendable Inheritance object ChatSendable ChatMessage Inherited Members ChatSendable.SerializeAndSend(ref IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, UdpClient) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ChatMessage(ChatUser, string) public ChatMessage(ChatUser user, string message) Parameters user ChatUser message string Properties Message public string Message { get; set; } Property Value string Timestamp public DateTime Timestamp { get; set; } Property Value DateTime User public ChatUser User { get; set; } Property Value ChatUser Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/UdpChat.Lib.ChatMessageResponse.html": {
    "href": "api/UdpChat.Lib.ChatMessageResponse.html",
    "title": "Class ChatMessageResponse | UDPChat",
    "keywords": "Class ChatMessageResponse Namespace UdpChat.Lib Assembly UdpChat.Lib.dll The responnse to a ChatMessage from the server. [Serializable] public class ChatMessageResponse : ChatSendable Inheritance object ChatSendable ChatMessageResponse Inherited Members ChatSendable.Timestamp ChatSendable.SerializeAndSend(ref IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, UdpClient) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ChatMessageResponse(bool, int) public ChatMessageResponse(bool received, int retransmittedNTimes) Parameters received bool retransmittedNTimes int Properties Received public bool Received { get; set; } Property Value bool If true means the server received the message correctly RetransmittedNTimes public int RetransmittedNTimes { get; set; } Property Value int If true means the server received the message correctly Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/UdpChat.Lib.ChatSendable.html": {
    "href": "api/UdpChat.Lib.ChatSendable.html",
    "title": "Class ChatSendable | UDPChat",
    "keywords": "Class ChatSendable Namespace UdpChat.Lib Assembly UdpChat.Lib.dll An abstract class that represents a sendable object in the chat system. For example a Request or a Response. public abstract class ChatSendable Inheritance object ChatSendable Derived ChatMessage ChatMessageResponse Request Response Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Timestamp Gets or sets the timestamp of the request. public DateTime Timestamp { get; set; } Property Value DateTime The timestamp of the request. Methods SerializeAndSend(IPEndPoint, UdpClient) public virtual int SerializeAndSend(IPEndPoint endpoint, UdpClient sender) Parameters endpoint IPEndPoint sender UdpClient Returns int SerializeAndSend(IPEndPoint, ref UdpClient) public virtual int SerializeAndSend(IPEndPoint endpoint, ref UdpClient sender) Parameters endpoint IPEndPoint sender UdpClient Returns int SerializeAndSend(ref IPEndPoint, ref UdpClient) Serializes the object and sends it to the specified endpoint using the specified client. public virtual int SerializeAndSend(ref IPEndPoint endpoint, ref UdpClient sender) Parameters endpoint IPEndPoint The endpoint to send this ChatSendable to sender UdpClient The UdpClient sending this ChatSendable Returns int The numbers of bytes sent Remarks This method is virtual so that it can be overridden. The default implementation uses Serialize(object, Type, JsonSerializerOptions). This makes it possible for any class that inherits from ChatSendable to be serialized and sent."
  },
  "api/UdpChat.Lib.ChatUser.html": {
    "href": "api/UdpChat.Lib.ChatUser.html",
    "title": "Class ChatUser | UDPChat",
    "keywords": "Class ChatUser Namespace UdpChat.Lib Assembly UdpChat.Lib.dll A ChatUser is a user of the chat system. It has a username and two endpoints, one for sending and one for receiving. [Serializable] public class ChatUser Inheritance object ChatUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatUser(string, string) public ChatUser(string username, string password) Parameters username string password string Properties Password public string Password { get; set; } Property Value string Username public string Username { get; set; } Property Value string"
  },
  "api/UdpChat.Lib.html": {
    "href": "api/UdpChat.Lib.html",
    "title": "Namespace UdpChat.Lib | UDPChat",
    "keywords": "Namespace UdpChat.Lib Classes ChatMessage A ChatMessage is a message sent by a user to the server. It has a user, a timestamp, and a message. ChatMessageResponse The responnse to a ChatMessage from the server. ChatSendable An abstract class that represents a sendable object in the chat system. For example a Request or a Response. ChatUser A ChatUser is a user of the chat system. It has a username and two endpoints, one for sending and one for receiving. Request Request to register a user to the server. After a Request there is associated expected Response Response Response to a Request. It has a message and a state. Enums Request.RequestType Represents the type of a request. Response.State The possible states of a response."
  },
  "api/UdpChat.Lib.Request.html": {
    "href": "api/UdpChat.Lib.Request.html",
    "title": "Class Request | UDPChat",
    "keywords": "Class Request Namespace UdpChat.Lib Assembly UdpChat.Lib.dll Request to register a user to the server. After a Request there is associated expected Response public class Request : ChatSendable Inheritance object ChatSendable Request Inherited Members ChatSendable.Timestamp ChatSendable.SerializeAndSend(ref IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, UdpClient) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Request(string, string, RequestType) Initializes a new instance of the Request class with the specified username, password, and request type. public Request(string username, string password, Request.RequestType type) Parameters username string The username of the user. password string The password of the user. type Request.RequestType The type of the request. Properties Password Sets or gets the password of the user public string Password { get; set; } Property Value string The password of the user Type Gets or sets the type of the request. public Request.RequestType Type { get; set; } Property Value Request.RequestType The type of the request. See Request.RequestType for available request types. Username Sets or gets the username of the user public string Username { get; set; } Property Value string The username of the user Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/UdpChat.Lib.Request.RequestType.html": {
    "href": "api/UdpChat.Lib.Request.RequestType.html",
    "title": "Enum Request.RequestType | UDPChat",
    "keywords": "Enum Request.RequestType Namespace UdpChat.Lib Assembly UdpChat.Lib.dll Represents the type of a request. public enum Request.RequestType Fields LOGIN = 1 REGISTER = 0"
  },
  "api/UdpChat.Lib.Response.html": {
    "href": "api/UdpChat.Lib.Response.html",
    "title": "Class Response | UDPChat",
    "keywords": "Class Response Namespace UdpChat.Lib Assembly UdpChat.Lib.dll Response to a Request. It has a message and a state. public class Response : ChatSendable Inheritance object ChatSendable Response Inherited Members ChatSendable.Timestamp ChatSendable.SerializeAndSend(ref IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, UdpClient) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Response(State, string) public Response(Response.State responseState, string message) Parameters responseState Response.State message string Properties Message public string Message { get; set; } Property Value string ResponseState public Response.State ResponseState { get; set; } Property Value Response.State Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/UdpChat.Lib.Response.State.html": {
    "href": "api/UdpChat.Lib.Response.State.html",
    "title": "Enum Response.State | UDPChat",
    "keywords": "Enum Response.State Namespace UdpChat.Lib Assembly UdpChat.Lib.dll The possible states of a response. public enum Response.State Fields ALREADY_REGISTERED = 2 ERROR = 4 LOGIN_FAILED = 3 LOGIN_SUCCESS = 1 REGISTER_SUCCESS = 0"
  },
  "api/UdpChat.Server.CentralRetransmissionServer.html": {
    "href": "api/UdpChat.Server.CentralRetransmissionServer.html",
    "title": "Class CentralRetransmissionServer | UDPChat",
    "keywords": "Class CentralRetransmissionServer Namespace UdpChat.Server Assembly UdpChat.Server.dll The central retransmission server for the chat system. It handles auth requests and retransmission of messages. public class CentralRetransmissionServer Inheritance object CentralRetransmissionServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CentralRetransmissionServer(int, int) Creates a new retranmission server with the specified ports public CentralRetransmissionServer(int registerPort = 5000, int retransmissionPort = 5001) Parameters registerPort int retransmissionPort int Properties authenticationService public ServerService authenticationService { get; set; } Property Value ServerService retransmissionService public ServerService retransmissionService { get; set; } Property Value ServerService Methods LoginUserAsync(string, string) Async database query to check if a user exists and has the correct password public Task<bool> LoginUserAsync(string name, string password) Parameters name string password string Returns Task<bool> An awaitable task which resolves to true if the user exists and has the correct password, false otherwhise Exceptions ChatDatabaseNotInitializedException RegisterUserAsync(string, string, string, int) public Task RegisterUserAsync(string name, string password, string ipAddress, int port) Parameters name string password string ipAddress string port int Returns Task Exceptions ChatDatabaseNotInitializedException UserAlreadyRegisteredException Start() Starts the server with the associated services: public void Start() Remarks The services started are: authenticationService retransmissionService StartAuthenticationService() Sets the authenticationService This service is responsible for all authentication operations. public void StartAuthenticationService() Remarks Starts a ServerService in localhost (127.0.0.1)with the specified port authenticationPort. StartRetransmissionService() Sets the retransmissionService. This service is responsible for receiving messages from clients and retransmitting them to the all registered users. public void StartRetransmissionService() Remarks Starts a ServerService in localhost (127.0.0.1)with the specified port retransmissionPort. Stop() Stops the services and closes the database connection public void Stop()"
  },
  "api/UdpChat.Server.html": {
    "href": "api/UdpChat.Server.html",
    "title": "Namespace UdpChat.Server | UDPChat",
    "keywords": "Namespace UdpChat.Server Classes CentralRetransmissionServer The central retransmission server for the chat system. It handles auth requests and retransmission of messages. Structs ServerService A struct to hold the state of a UdpClient"
  },
  "api/UdpChat.Server.ServerService.html": {
    "href": "api/UdpChat.Server.ServerService.html",
    "title": "Struct ServerService | UDPChat",
    "keywords": "Struct ServerService Namespace UdpChat.Server Assembly UdpChat.Server.dll A struct to hold the state of a UdpClient public struct ServerService Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ServerService(UdpClient, IPEndPoint) A constructor to create a new ServerService with the specified client and endpoint. After a ServerService is created, it can be used to receive messages from the client. A handler for the received messages can be specified with the BeginReceive(AsyncCallback, object) method. As a handler can only accept a request at a time, it's recommended to use Run(Action) inside the handler to process the request inside. public ServerService(UdpClient client, IPEndPoint endpoint) Parameters client UdpClient The UdpClient used for network communications. endpoint IPEndPoint The network endpoint where the service is located. Examples private void AuthenticationHandler(IAsyncResult res) { if (!TryGetStateFromAsyncRes(ref res, out var clientState)) return; byte[] receiveBytes = clientState.socket.EndReceive(res, ref clientState.endpoint!); Task.Run(() => { var req = System.Text.Json.JsonSerializer.Deserialize<Request>(receiveBytes); Console.WriteLine($\"Received request from {clientState.endpoint}:\\n\\t{req}\"); if (req == null) { Console.Error.WriteLine(\"Error deserializing request\"); return; } switch (req.Type) { case Request.RequestType.REGISTER: HandleRegisterRequest(req, ref clientState); break; case Request.RequestType.LOGIN: HandleLoginRequest(req, ref clientState); break; default: Console.Error.WriteLine($\"Invalid request type {req.Type}\"); new Response(Response.State.ERROR, $\"Invalid request type {req.Type}\") .SerializeAndSend(ref clientState.endpoint, ref clientState.socket); break; } }); // Start a new receive operation clientState.socket.BeginReceive(new AsyncCallback(AuthenticationHandler), clientState); } Fields endpoint The endpoint of the client public IPEndPoint endpoint Field Value IPEndPoint socket The socket of the client public UdpClient socket Field Value UdpClient"
  },
  "client/examples.html": {
    "href": "client/examples.html",
    "title": "Examples of using the client | UDPChat",
    "keywords": "Examples of using the client This section contains examples of using the client."
  },
  "client/index.html": {
    "href": "client/index.html",
    "title": "Client CLI Documentation | UDPChat",
    "keywords": "Client CLI Documentation This is the documentation for the client CLI of UDPChat. This CLI can be used to connect to a server, register, login, send messages, etc. How to use"
  },
  "index.html": {
    "href": "index.html",
    "title": "UDP Multichat CLI Application | UDPChat",
    "keywords": "UDP Multichat CLI Application This chat app is a simple UDP client/server application that allows multiple clients to connect to a server and send messages to each other. The server is able to handle multiple clients at once and will broadcast messages to all connected clients."
  },
  "server/examples.html": {
    "href": "server/examples.html",
    "title": "Examples of using the server | UDPChat",
    "keywords": "Examples of using the server This section contains examples of using the server."
  },
  "server/index.html": {
    "href": "server/index.html",
    "title": "Server CLI Documentation | UDPChat",
    "keywords": "Server CLI Documentation This is the documentation for the server CLI of UDPChat. This CLI launches a server that can be used for the UDPChat client. How to use"
  }
}