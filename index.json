{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Code Documentation | UDPChat",
    "keywords": "Code Documentation This is the documentation for the source code of this project. Autogenerated from XML comments in the source code using DocFX. In this documentation you will find information about the structure of the code, the namespaces and the classes. Table of contents Code Documentation Table of contents Solution structure Namespace structure Available namespaces Project ULM class diagram How to generate the documentation Solution structure This dotnet solution is composed of 3 CS-projects: 2 projects for entities that are compiled into executables. UdpChat.Client - The client application. UdpChat.Server - The server application. 1 project for the shared code between client and server. UdpChat.Lib - The shared code between the client and the server. Namespace structure This solution uses namespaces to separate the each CS-project's code. See the Available namespaces section for more information. Available namespaces Client : Client logic. Client.CLI : CLI logic. Client entry point. Server : Server logic. Server.CLI : CLI logic. Server entry point. Server.Exceptions : Exceptions used by the server. Lib : Shared code between the client and the server. All Serializable classes represent the payloads being sent between user and server. This works by transforming the class into a JSON and the serializing that JSON. As it is a JSON it can be sent over the network, recieved, deserialized and transformed back into a class representing the payload. Lib.ChatUser : Serialiable class representing a client as a user. Lib.Message : Serializable class representing a message. Lib.Authentication : Serialiable Authentication classes representing an Auth request and response. Project ULM class diagram Click on the image to open in a new tab. It's an SVG so you can zoom in and out and it will look well. How to generate the documentation Install DocFX. See here for more information. (Optional) Install wkhtmltopdf for PDF generation. Run docfx metadata docfx_project/docfx.json && docfx build docfx_project/docfx.json from the root of the repository. (Optional) Run docfx metadata docfx_project/docfx.json && docfx pdf docfx_project/docfx.json to generate a PDF version of the documentation. The generated documentation will be in the docfx_project/ folder, more specifically: docfx_project/_site/ for the HTML documentation. docfx_project/_site_pdf/ for the PDF version of the documentation."
  },
  "api/UdpChat.Client.ChatClient.html": {
    "href": "api/UdpChat.Client.ChatClient.html",
    "title": "Class ChatClient | UDPChat",
    "keywords": "Class ChatClient Namespace UdpChat.Client Assembly UdpChat.Client.dll A ChatClient is a client for the chat system. public class ChatClient Inheritance object ChatClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatClient(int, string, int) Initializes a new instance of the ChatClient class with the specified client port and central server IP and port. public ChatClient(int clientPort = 4000, string centralServerIP = \"127.0.0.1\", int centralServerPort = 5000) Parameters clientPort int The port number to use for the client. centralServerIP string The IP address of the central server. centralServerPort int The port number to use for the central server. Exceptions ArgumentException Thrown if the receive socket's local endpoint is null. Fields user public ChatUser? user Field Value ChatUser ChatUser instance representing this ChatClient Properties MessageListenerService public ServerService MessageListenerService { get; set; } Property Value ServerService Methods PingCentralServer() Pings the central server to check if it is reachable public bool PingCentralServer() Returns bool true if the central server can be reached, false if not ReceiveCallback(IAsyncResult) public void ReceiveCallback(IAsyncResult ar) Parameters ar IAsyncResult SendAuthRequest(string, string, RequestType) Sends a an auth request of type Request.RequestType to the central server. public void SendAuthRequest(string username, string password, Request.RequestType type) Parameters username string password string type Request.RequestType SendMessage(string) Sends a message if the user is logged in to the central server. public void SendMessage(string msg) Parameters msg string StartMessageService() public void StartMessageService()"
  },
  "api/UdpChat.Client.CLI.ClientCLI.html": {
    "href": "api/UdpChat.Client.CLI.ClientCLI.html",
    "title": "Class ClientCLI | UDPChat",
    "keywords": "Class ClientCLI Namespace UdpChat.Client.CLI Assembly UdpChat.Client.dll The ClientCLI class is a command line interface for the client. It is used to create a ChatClient instance with default or custom settings. See Client CLI Documentation for more information. public class ClientCLI Inheritance object ClientCLI Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static Task Main(string[] args) Parameters args string[] Returns Task"
  },
  "api/UdpChat.Client.CLI.html": {
    "href": "api/UdpChat.Client.CLI.html",
    "title": "Namespace UdpChat.Client.CLI | UDPChat",
    "keywords": "Namespace UdpChat.Client.CLI Classes ClientCLI The ClientCLI class is a command line interface for the client. It is used to create a ChatClient instance with default or custom settings. See Client CLI Documentation for more information."
  },
  "api/UdpChat.Client.html": {
    "href": "api/UdpChat.Client.html",
    "title": "Namespace UdpChat.Client | UDPChat",
    "keywords": "Namespace UdpChat.Client Classes ChatClient A ChatClient is a client for the chat system. Structs ServerService A struct to hold the state of a UdpClient"
  },
  "api/UdpChat.Client.ServerService.html": {
    "href": "api/UdpChat.Client.ServerService.html",
    "title": "Struct ServerService | UDPChat",
    "keywords": "Struct ServerService Namespace UdpChat.Client Assembly UdpChat.Client.dll A struct to hold the state of a UdpClient public struct ServerService Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ServerService(UdpClient, IPEndPoint) A constructor to create a new ServerService with the specified client and endpoint. After a ServerService is created, it can be used to receive messages from the client. A handler for the received messages can be specified with the BeginReceive(AsyncCallback, object) method. As a handler can only accept a request at a time, it's recommended to use Run(Action) inside the handler to process the request inside. public ServerService(UdpClient client, IPEndPoint endpoint) Parameters client UdpClient The UdpClient used for network communications. endpoint IPEndPoint The network endpoint where the service is located. Examples private void AuthenticationHandler(IAsyncResult res) { if (!TryGetStateFromAsyncRes(ref res, out var clientState)) return; byte[] receiveBytes = clientState.socket.EndReceive(res, ref clientState.endpoint!); Task.Run(() => { var req = System.Text.Json.JsonSerializer.Deserialize<Request>(receiveBytes); Console.WriteLine($\"Received request from {clientState.endpoint}:\\n\\t{req}\"); if (req == null) { Console.Error.WriteLine(\"Error deserializing request\"); return; } switch (req.Type) { case Request.RequestType.REGISTER: HandleRegisterRequest(req, ref clientState); break; case Request.RequestType.LOGIN: HandleLoginRequest(req, ref clientState); break; default: Console.Error.WriteLine($\"Invalid request type {req.Type}\"); new Response(Response.State.ERROR, $\"Invalid request type {req.Type}\") .SerializeAndSend(ref clientState.endpoint, ref clientState.socket); break; } }); // Start a new receive operation clientState.socket.BeginReceive(new AsyncCallback(AuthenticationHandler), clientState); } Fields endpoint The endpoint of the client public IPEndPoint endpoint Field Value IPEndPoint socket The socket of the client public UdpClient socket Field Value UdpClient"
  },
  "api/UdpChat.Lib.Authentication.html": {
    "href": "api/UdpChat.Lib.Authentication.html",
    "title": "Namespace UdpChat.Lib.Authentication | UDPChat",
    "keywords": "Namespace UdpChat.Lib.Authentication Classes Request Request to register a user to the server. After a Request there is associated expected Response Response Response to a Request. It has a message and a state. Enums Request.RequestType Represents the type of a request. Response.State The possible states of a response."
  },
  "api/UdpChat.Lib.Authentication.Request.html": {
    "href": "api/UdpChat.Lib.Authentication.Request.html",
    "title": "Class Request | UDPChat",
    "keywords": "Class Request Namespace UdpChat.Lib.Authentication Assembly UdpChat.Lib.dll Request to register a user to the server. After a Request there is associated expected Response public class Request : ChatSendable Inheritance object ChatSendable Request Inherited Members ChatSendable.Timestamp ChatSendable.SerializeAndSend(ref IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, UdpClient) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Request(string, string, RequestType) Initializes a new instance of the Request class with the specified username, password, and request type. public Request(string username, string password, Request.RequestType type) Parameters username string The username of the user. password string The password of the user. type Request.RequestType The type of the request. Properties Password Sets or gets the password of the user public string Password { get; set; } Property Value string The password of the user Type Gets or sets the type of the request. public Request.RequestType Type { get; set; } Property Value Request.RequestType The type of the request. See Request.RequestType for available request types. Username Sets or gets the username of the user public string Username { get; set; } Property Value string The username of the user Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/UdpChat.Lib.Authentication.Request.RequestType.html": {
    "href": "api/UdpChat.Lib.Authentication.Request.RequestType.html",
    "title": "Enum Request.RequestType | UDPChat",
    "keywords": "Enum Request.RequestType Namespace UdpChat.Lib.Authentication Assembly UdpChat.Lib.dll Represents the type of a request. public enum Request.RequestType Fields LOGIN = 1 REGISTER = 0"
  },
  "api/UdpChat.Lib.Authentication.Response.html": {
    "href": "api/UdpChat.Lib.Authentication.Response.html",
    "title": "Class Response | UDPChat",
    "keywords": "Class Response Namespace UdpChat.Lib.Authentication Assembly UdpChat.Lib.dll Response to a Request. It has a message and a state. public class Response : ChatSendable Inheritance object ChatSendable Response Inherited Members ChatSendable.Timestamp ChatSendable.SerializeAndSend(ref IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, UdpClient) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Response(State, string) public Response(Response.State responseState, string message) Parameters responseState Response.State message string Properties Message public string Message { get; set; } Property Value string ResponseState public Response.State ResponseState { get; set; } Property Value Response.State Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/UdpChat.Lib.Authentication.Response.State.html": {
    "href": "api/UdpChat.Lib.Authentication.Response.State.html",
    "title": "Enum Response.State | UDPChat",
    "keywords": "Enum Response.State Namespace UdpChat.Lib.Authentication Assembly UdpChat.Lib.dll The possible states of a response. public enum Response.State Fields ALREADY_LOGGED_IN = 3 ALREADY_REGISTERED = 2 ERROR = 5 LOGIN_FAILED = 4 LOGIN_SUCCESS = 1 REGISTER_SUCCESS = 0"
  },
  "api/UdpChat.Lib.ChatSendable.html": {
    "href": "api/UdpChat.Lib.ChatSendable.html",
    "title": "Class ChatSendable | UDPChat",
    "keywords": "Class ChatSendable Namespace UdpChat.Lib Assembly UdpChat.Lib.dll An abstract class that represents a sendable object in the chat system. For example a Request or a Response. public abstract class ChatSendable Inheritance object ChatSendable Derived Request Response ChatMessage ChatMessageResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Timestamp Gets or sets the timestamp of the request. public DateTime Timestamp { get; set; } Property Value DateTime The timestamp of the request. Methods SerializeAndSend(IPEndPoint, UdpClient) public virtual int SerializeAndSend(IPEndPoint endpoint, UdpClient sender) Parameters endpoint IPEndPoint sender UdpClient Returns int SerializeAndSend(IPEndPoint, ref UdpClient) public virtual int SerializeAndSend(IPEndPoint endpoint, ref UdpClient sender) Parameters endpoint IPEndPoint sender UdpClient Returns int SerializeAndSend(ref IPEndPoint, ref UdpClient) Serializes the object and sends it to the specified endpoint using the specified client. public virtual int SerializeAndSend(ref IPEndPoint endpoint, ref UdpClient sender) Parameters endpoint IPEndPoint The endpoint to send this ChatSendable to sender UdpClient The UdpClient sending this ChatSendable Returns int The numbers of bytes sent Remarks This method is virtual so that it can be overridden. The default implementation uses Serialize(object, Type, JsonSerializerOptions). This makes it possible for any class that inherits from ChatSendable to be serialized and sent."
  },
  "api/UdpChat.Lib.ChatUser.ChatUser.html": {
    "href": "api/UdpChat.Lib.ChatUser.ChatUser.html",
    "title": "Class ChatUser | UDPChat",
    "keywords": "Class ChatUser Namespace UdpChat.Lib.ChatUser Assembly UdpChat.Lib.dll A ChatUser is a user of the chat system. It has a username and two endpoints, one for sending and one for receiving. [Serializable] public class ChatUser Inheritance object ChatUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatUser(string, string) public ChatUser(string username, string password) Parameters username string password string Properties Password public string Password { get; set; } Property Value string Username public string Username { get; set; } Property Value string"
  },
  "api/UdpChat.Lib.ChatUser.html": {
    "href": "api/UdpChat.Lib.ChatUser.html",
    "title": "Namespace UdpChat.Lib.ChatUser | UDPChat",
    "keywords": "Namespace UdpChat.Lib.ChatUser Classes ChatUser A ChatUser is a user of the chat system. It has a username and two endpoints, one for sending and one for receiving."
  },
  "api/UdpChat.Lib.Deserializerer-1.html": {
    "href": "api/UdpChat.Lib.Deserializerer-1.html",
    "title": "Class Deserializerer<T> | UDPChat",
    "keywords": "Class Deserializerer<T> Namespace UdpChat.Lib Assembly UdpChat.Lib.dll public class Deserializerer<T> where T : ChatSendable Type Parameters T Inheritance object Deserializerer<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(byte[]) public static T? Deserialize(byte[] json) Parameters json byte[] Returns T"
  },
  "api/UdpChat.Lib.html": {
    "href": "api/UdpChat.Lib.html",
    "title": "Namespace UdpChat.Lib | UDPChat",
    "keywords": "Namespace UdpChat.Lib Classes ChatSendable An abstract class that represents a sendable object in the chat system. For example a Request or a Response. Deserializerer<T>"
  },
  "api/UdpChat.Lib.Message.ChatMessage.html": {
    "href": "api/UdpChat.Lib.Message.ChatMessage.html",
    "title": "Class ChatMessage | UDPChat",
    "keywords": "Class ChatMessage Namespace UdpChat.Lib.Message Assembly UdpChat.Lib.dll A ChatMessage is a message sent by a user to the server. It has a user, a timestamp, and a message. [Serializable] public class ChatMessage : ChatSendable Inheritance object ChatSendable ChatMessage Inherited Members ChatSendable.SerializeAndSend(ref IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, UdpClient) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ChatMessage(ChatUser, string) public ChatMessage(ChatUser user, string message) Parameters user ChatUser message string Properties Message public string Message { get; set; } Property Value string Timestamp public DateTime Timestamp { get; set; } Property Value DateTime User public ChatUser User { get; set; } Property Value ChatUser Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/UdpChat.Lib.Message.ChatMessageResponse.html": {
    "href": "api/UdpChat.Lib.Message.ChatMessageResponse.html",
    "title": "Class ChatMessageResponse | UDPChat",
    "keywords": "Class ChatMessageResponse Namespace UdpChat.Lib.Message Assembly UdpChat.Lib.dll The responnse to a ChatMessage from the server. [Serializable] public class ChatMessageResponse : ChatSendable Inheritance object ChatSendable ChatMessageResponse Inherited Members ChatSendable.Timestamp ChatSendable.SerializeAndSend(ref IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, ref UdpClient) ChatSendable.SerializeAndSend(IPEndPoint, UdpClient) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ChatMessageResponse(bool, int) public ChatMessageResponse(bool received, int retransmittedNTimes) Parameters received bool retransmittedNTimes int Properties Received public bool Received { get; set; } Property Value bool If true means the server received the message correctly RetransmittedNTimes public int RetransmittedNTimes { get; set; } Property Value int If true means the server received the message correctly Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/UdpChat.Lib.Message.html": {
    "href": "api/UdpChat.Lib.Message.html",
    "title": "Namespace UdpChat.Lib.Message | UDPChat",
    "keywords": "Namespace UdpChat.Lib.Message Classes ChatMessage A ChatMessage is a message sent by a user to the server. It has a user, a timestamp, and a message. ChatMessageResponse The responnse to a ChatMessage from the server."
  },
  "api/UdpChat.Server.CentralRetransmissionServer.html": {
    "href": "api/UdpChat.Server.CentralRetransmissionServer.html",
    "title": "Class CentralRetransmissionServer | UDPChat",
    "keywords": "Class CentralRetransmissionServer Namespace UdpChat.Server Assembly UdpChat.Server.dll The central retransmission server for the chat system. It handles auth requests and retransmission of messages. public class CentralRetransmissionServer Inheritance object CentralRetransmissionServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CentralRetransmissionServer(int, int) Creates a new retranmission server with the specified ports public CentralRetransmissionServer(int registerPort = 5000, int retransmissionPort = 5001) Parameters registerPort int retransmissionPort int Properties AuthenticationService public ServerService AuthenticationService { get; set; } Property Value ServerService RetransmissionService public ServerService RetransmissionService { get; set; } Property Value ServerService Methods LoginUserAsync(string, string, string, int) Async database query to check if a user exists and has the correct password public Task<bool> LoginUserAsync(string name, string password, string ipAddress, int port) Parameters name string password string ipAddress string port int Returns Task<bool> An awaitable task which resolves to true if the user exists and has the correct password, false otherwhise Exceptions ChatDatabaseNotInitializedException UserAlreadyLoggedInxception RegisterUserAsync(string, string, string, int) public Task RegisterUserAsync(string name, string password, string ipAddress, int port) Parameters name string password string ipAddress string port int Returns Task Exceptions ChatDatabaseNotInitializedException UserAlreadyRegisteredException Start() Starts the server with the associated services: public void Start() Remarks The services started are: AuthenticationService RetransmissionService StartAuthenticationService() Sets the AuthenticationService This service is responsible for all authentication operations. public void StartAuthenticationService() Remarks Starts a ServerService in localhost (127.0.0.1)with the specified port AuthenticationPort. StartRetransmissionService() Sets the RetransmissionService. This service is responsible for receiving messages from clients and retransmitting them to the all registered users. public void StartRetransmissionService() Remarks Starts a ServerService in localhost (127.0.0.1)with the specified port RetransmissionPort. Stop() Stops the services and closes the database connection public void Stop()"
  },
  "api/UdpChat.Server.CLI.html": {
    "href": "api/UdpChat.Server.CLI.html",
    "title": "Namespace UdpChat.Server.CLI | UDPChat",
    "keywords": "Namespace UdpChat.Server.CLI Classes ServerCLI Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy."
  },
  "api/UdpChat.Server.CLI.ServerCLI.html": {
    "href": "api/UdpChat.Server.CLI.ServerCLI.html",
    "title": "Class ServerCLI | UDPChat",
    "keywords": "Class ServerCLI Namespace UdpChat.Server.CLI Assembly UdpChat.Server.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class ServerCLI Inheritance object ServerCLI Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseArgs(string[]) Parses the command line arguments public static int? ParseArgs(string[] args) Parameters args string[] Returns int?"
  },
  "api/UdpChat.Server.Exceptions.ChatDatabaseNotInitializedException.html": {
    "href": "api/UdpChat.Server.Exceptions.ChatDatabaseNotInitializedException.html",
    "title": "Class ChatDatabaseNotInitializedException | UDPChat",
    "keywords": "Class ChatDatabaseNotInitializedException Namespace UdpChat.Server.Exceptions Assembly UdpChat.Server.dll Represents errors that occur during application execution. public class ChatDatabaseNotInitializedException : Exception, ISerializable Inheritance object Exception ChatDatabaseNotInitializedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ChatDatabaseNotInitializedException() Initializes a new instance of the Exception class. public ChatDatabaseNotInitializedException()"
  },
  "api/UdpChat.Server.Exceptions.html": {
    "href": "api/UdpChat.Server.Exceptions.html",
    "title": "Namespace UdpChat.Server.Exceptions | UDPChat",
    "keywords": "Namespace UdpChat.Server.Exceptions Classes ChatDatabaseNotInitializedException Represents errors that occur during application execution. UserAlreadyLoggedInxception Represents errors that occur during application execution. UserAlreadyRegisteredException Represents errors that occur during application execution."
  },
  "api/UdpChat.Server.Exceptions.UserAlreadyLoggedInxception.html": {
    "href": "api/UdpChat.Server.Exceptions.UserAlreadyLoggedInxception.html",
    "title": "Class UserAlreadyLoggedInxception | UDPChat",
    "keywords": "Class UserAlreadyLoggedInxception Namespace UdpChat.Server.Exceptions Assembly UdpChat.Server.dll Represents errors that occur during application execution. public class UserAlreadyLoggedInxception : Exception, ISerializable Inheritance object Exception UserAlreadyLoggedInxception Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UserAlreadyLoggedInxception(string) Initializes a new instance of the Exception class with a specified error message. public UserAlreadyLoggedInxception(string message) Parameters message string The message that describes the error."
  },
  "api/UdpChat.Server.Exceptions.UserAlreadyRegisteredException.html": {
    "href": "api/UdpChat.Server.Exceptions.UserAlreadyRegisteredException.html",
    "title": "Class UserAlreadyRegisteredException | UDPChat",
    "keywords": "Class UserAlreadyRegisteredException Namespace UdpChat.Server.Exceptions Assembly UdpChat.Server.dll Represents errors that occur during application execution. public class UserAlreadyRegisteredException : Exception, ISerializable Inheritance object Exception UserAlreadyRegisteredException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UserAlreadyRegisteredException(string) Initializes a new instance of the Exception class with a specified error message. public UserAlreadyRegisteredException(string message) Parameters message string The message that describes the error."
  },
  "api/UdpChat.Server.html": {
    "href": "api/UdpChat.Server.html",
    "title": "Namespace UdpChat.Server | UDPChat",
    "keywords": "Namespace UdpChat.Server Classes CentralRetransmissionServer The central retransmission server for the chat system. It handles auth requests and retransmission of messages. Structs ServerService A struct to hold the state of a UdpClient"
  },
  "api/UdpChat.Server.ServerService.html": {
    "href": "api/UdpChat.Server.ServerService.html",
    "title": "Struct ServerService | UDPChat",
    "keywords": "Struct ServerService Namespace UdpChat.Server Assembly UdpChat.Server.dll A struct to hold the state of a UdpClient public struct ServerService Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ServerService(UdpClient, IPEndPoint) A constructor to create a new ServerService with the specified client and endpoint. After a ServerService is created, it can be used to receive messages from the client. A handler for the received messages can be specified with the BeginReceive(AsyncCallback, object) method. As a handler can only accept a request at a time, it's recommended to use Run(Action) inside the handler to process the request inside. public ServerService(UdpClient client, IPEndPoint endpoint) Parameters client UdpClient The UdpClient used for network communications. endpoint IPEndPoint The network endpoint where the service is located. Examples private void AuthenticationHandler(IAsyncResult res) { if (!TryGetStateFromAsyncRes(ref res, out var clientState)) return; byte[] receiveBytes = clientState.socket.EndReceive(res, ref clientState.endpoint!); Task.Run(() => { var req = System.Text.Json.JsonSerializer.Deserialize<Request>(receiveBytes); Console.WriteLine($\"Received request from {clientState.endpoint}:\\n\\t{req}\"); if (req == null) { Console.Error.WriteLine(\"Error deserializing request\"); return; } switch (req.Type) { case Request.RequestType.REGISTER: HandleRegisterRequest(req, ref clientState); break; case Request.RequestType.LOGIN: HandleLoginRequest(req, ref clientState); break; default: Console.Error.WriteLine($\"Invalid request type {req.Type}\"); new Response(Response.State.ERROR, $\"Invalid request type {req.Type}\") .SerializeAndSend(ref clientState.endpoint, ref clientState.socket); break; } }); // Start a new receive operation clientState.socket.BeginReceive(new AsyncCallback(AuthenticationHandler), clientState); } Fields endpoint The endpoint of the client public IPEndPoint endpoint Field Value IPEndPoint socket The socket of the client public UdpClient socket Field Value UdpClient"
  },
  "client/examples.html": {
    "href": "client/examples.html",
    "title": "Examples of using the client | UDPChat",
    "keywords": "Examples of using the client This section contains examples of using the client. Register Input a command, available commands are - register - login - send - unregister register Enter a username, spaces are allowed, but not empty string: (↩️ after input) nico Enter a password, spaces are allowed, but not empty string: (↩️ after input) nico Sending request Request(REGISTER,nico,nico,14/6/2023 17:41:57) to 127.0.0.1:5000... Sent 93 Waiting for response from server 127.0.0.1:5000... User registered successfully Input a command, available commands are - register - login - send - unregister Login Input a command, available commands are - register - login - send - unregister login Enter a username, spaces are allowed, but not empty string: (↩️ after input) nico Enter a password, spaces are allowed, but not empty string: (↩️ after input) nico Sending request Request(LOGIN,nico,nico,14/6/2023 17:42:50) to 127.0.0.1:5000... Sent 93 Waiting for response from server 127.0.0.1:5000... User logged in successfully Currently logged in as nico Input a command, available commands are - register - login - send - unregister Note: When a user logs in it's ipadress and port registered in the central server database are updated with the current ipadress and port. Send Let's imagine we have two clients, one with username Nico and one with username Pedro. Pedro sends a message to the server which is then sent to Nico. Bob sends a message Currently logged in as bob Input a command, available commands are - register - login - send - unregister send Enter a message: (↩️ to send, shift + ↩️ for new line) Hola a todos Waiting for response from server 127.0.0.1:5001... Received response ChatMessageResponse(Received:True, RetransmittedNTimes:1) Message was received correctly and retransmitted (with no garantees of reaching) to 1 clients As seen in the response, the message was received correctly and retransmitted to 1 client. Currently logged in as nico Input a command, available commands are - register - login - send - unregister Received message from server Received message from bob: Hola a todos Note: The message was received correctly, but there is no garantee that it will reach any of the rest of the registered clients. The server sends the messages and does not wait for a response from the clients. WARNING: Users need to be logged in before being able to send messages. In order to log in, the user needs to be registered first. Users need to use the same retransmission server in order to be able to communicate. Unregister NOT IMPLEMENTED YET"
  },
  "client/index.html": {
    "href": "client/index.html",
    "title": "Client CLI Documentation | UDPChat",
    "keywords": "Client CLI Documentation This CLI can be used to interact with a server in otder to register, login, send messages, etc. Table of contents Client CLI Documentation Table of contents Usage Default settings Custom settings Commands Installation With dotnet (.NET) Binary executable Latest release download Github Releases page Add to PATH MacOS and Linux Windows CMD or Powershell Excute the client CLI Binary Windows MacOS Linux Dotnet (.NET) Usage Default settings $ UdpChat.Client Welcome to the UDP chat client! Default settings: Client ports: Recieve 4000 - Send 4001 Central Server: Adress 127.0.0.1 - Port 5000 Do you want to use the default settings? (y/n) (↩️ after input)) y Client created at 4000 with central server at 127.0.0.1:5000 Messages that are sent by the server will be displayed, waiting for messages... Input a command, available commands are - register - login - send - unregister Custom settings $ UdpChat.Client Welcome to the UDP chat client! Default settings: Client ports: Recieve 4000 - Send 4001 Central Server: Adress 127.0.0.1 - Port 5000 Do you want to use the default settings? (y/n) (↩️ after input)) n Enter a port for the client (enter for 4000): 4004 IP of central server (enter for 127.0.0.1): Port of central server (enter for 5000): Client config: Client ports: Receive=4004 - Send=4005 Central Server: Address=127.0.0.1 - Port=5000 Is this correct? (y/n) Client created at 4004 with central server at 127.0.0.1:5000 Messages that are sent by the server will be displayed, waiting for messages... Input a command, available commands are - register - login - send - unregister Commands register login send unregister To see examples of using the client go to examples To exit the server in a controlled manner press Ctrl + C. This will ensure the client closes its opened resources in an orderly fashion. Installation There is no installer. There are 2 ways to get the client CLI: With dotnet (.NET) git clone git@github.com:nicocossiom/IngenieriaProtocolos.git UDPChat Cloning into 'UDPChat'... remote: Enumerating objects: 584, done. remote: Counting objects: 100% (584/584), done. remote: Compressing objects: 100% (291/291), done. remote: Total 584 (delta 340), reused 514 (delta 270), pack-reused 0 Receiving objects: 100% (584/584), 6.78 MiB | 1.57 MiB/s, done. Resolving deltas: 100% (340/340), done. Binary executable You can download a binary from the releases page and run it directly. There are binaries for Windowsx64, Linux64 and MacOSarm64. Latest release download Linux MacOS Windows Github Releases page You can laso go to the releases page on Github to see all available releases and platforms. After downloading the client move the file to a folder of your choice. You can then place this folder wherever you want. You can also add the folder to your PATH environment variable to be able to run the client from anywhere. Add to PATH MacOS and Linux export PATH=$PATH:/path/to/folder Windows CMD or Powershell Windows CMD in Admin mode set PATH=%PATH%;C:\\path\\to\\folder Windows Powershell in Admin mode $env:Path += \";C:\\path\\to\\folder\" In Windows you can run the executable from the command line. Or from double clicking it. Excute the client CLI Binary Windows # Windows win-x64_UdpChat.Client.exe In MacOS and Linux you may need to give the executable permissions before running it. MacOS chmod +x osx-arm64_UdpChat.Client ./osx-arm64_UdpChat.Client Note: On MacOS you may need to open in Finder the folder where you have the binaries, then right Click -> Open to allow the executable to run you will get a popup saying something like: \"osx-arm64_UdpChat .Client\" can't be opened because Apple cannot check it for malicious software. .... Click OK. And try again. Linux chmod +x linux-x64_UdpChat.Client && ./linux-x64_UdpChat.Client Dotnet (.NET) cd UDPChat dotnet run --project UdpChat.Client Welcome to the UDP chat client! Default settings: Client ports: Recieve 4000 - Send 4001 Central Server: Adress 127.0.0.1 - Port 5000 Do you want to use the default settings? (y/n) (↩️ after input))"
  },
  "cover.html": {
    "href": "cover.html",
    "title": "Proyecto de la asignatura de Ingeniería de Protocolos | UDPChat",
    "keywords": "Proyecto de la asignatura de Ingeniería de Protocolos Esta es la memoria del proyecto SERVICIO CONVERSACIONAL MULTIUSUARIO (APL05) de la asignatura de Ingeniería de Protocolos del año 22-23. Autor Nicolás Cossío Miravalles - Matrícula: b190082 - n.cossio@alumnos.upm.es Documentación del proyecto Atención: Se recomienda leer la documentación en el formato web, ya que en el formato PDF no se muestran correctamente las imágenes y diagramas. Puede encontrar la documentación del proyecto en el siguiente enlace. La documentación está escrita en inglés. En el enlace encontrará: Explicación sobre la problemática del proyecto. Explicación de la solución propuesta. Manual de uso de las aplicaciones de CLI desarrolladas: Cliente Servidor .NET API Docs. Esto es la documentación interna del el código generada de los comentarios en el código. Enunciado del proyecto DESCRIPCIÓN: Implementación de un servicio conversacional “chat” multiusuario. Este servicio estará formado por una entidad central retransmisora y por los distintos usuarios del sistema. El objetivo es que una vez que los usuarios se hayan registrado a la entidad retransmisora, ésta se encargue de difundir los datos que le envíe un usuario a todos los usuarios registrados. Las características generales del servicio serán las siguientes: − Cada usuario abrirá dos sockets UDP uno para enviar datos y otro para recibir datos. Los puertos de estos dos sockets deberán ser consecutivos. − La entidad retransmisora dispondrá de dos sockets en dos puertos distintos, ofreciendo dos servicios: un puerto de registro de usuarios servirá para que los usuarios del sistema se registren. El otro puerto (puerto de difusión de datos) servirá para recibir datos, que serán retransmitidos a todas las entidades registradas. − Cuando la entidad retransmisora reciba una petición por el puerto de registro de usuarios almacenará la dirección del usuario en una tabla de usuarios. − Cuando la entidad retransmisora reciba una petición por el puerto de difusión de datos retransmitirá los datos a todos los usuarios registrados. Asimismo, se mandará un asentimiento al usuario Licencia Este proyecto está bajo la licencia MIT. Para más información, ver el archivo LICENSE"
  },
  "download/index.html": {
    "href": "download/index.html",
    "title": "Downloads | UDPChat",
    "keywords": "Downloads There is no installer. There are 2 ways to get the client CLI: download the binary executable or download the dotnet solution and run with the dotnet runtime. Table of contents Downloads Table of contents Binary executable Latest release download Github Releases page Add to PATH MacOS and Linux Windows CMD or Powershell Dotnet solution (.NET source code) Binary executable You can download a binary from the releases page and run it directly. There are binaries for Windowsx64, Linux64 and MacOSarm64. Latest release download Client: Linux MacOS Windows Server: Linux MacOS Windows Github Releases page You can laso go to the releases page on Github to see all available releases and platforms. After downloading the client move the file to a folder of your choice and run the executable. Add to PATH MacOS and Linux export PATH=$PATH:/path/to/folder Windows CMD or Powershell Windows CMD in Admin mode set PATH=%PATH%;C:\\path\\to\\folder Windows Powershell in Admin mode $env:Path += \";C:\\path\\to\\folder\" In Windows you can run the executable from the command line. Or from double clicking it. Dotnet solution (.NET source code) git clone git@github.com:nicocossiom/IngenieriaProtocolos.git UDPChat Cloning into 'UDPChat'... remote: Enumerating objects: 584, done. remote: Counting objects: 100% (584/584), done. remote: Compressing objects: 100% (291/291), done. remote: Total 584 (delta 340), reused 514 (delta 270), pack-reused 0 Receiving objects: 100% (584/584), 6.78 MiB | 1.57 MiB/s, done. Resolving deltas: 100% (340/340), done. cd UDPChat dotnet run --project UdpChat.Client Welcome to the UDP chat client! Default settings: Client ports: Recieve 4000 - Send 4001 Central Server: Adress 127.0.0.1 - Port 5000 Do you want to use the default settings? (y/n) (↩️ after input))"
  },
  "index.html": {
    "href": "index.html",
    "title": "UDP Multichat CLI Application | UDPChat",
    "keywords": "UDP Multichat CLI Application This chat app is a simple UDP client/server application that allows multiple clients to connect to a server and send messages to each other. The server is able to handle multiple clients at once and will broadcast messages to all connected clients. Table of contents UDP Multichat CLI Application Table of contents Quickstart Design Client CLI Server CLI Project structure Messages between Client <-> Server Authentication Persistence Basic functionality of a UDP Multichat Possible client states Possible server states Quickstart To get the system started you must first start the server. This can be done by running the server CLI application. See Server CLI for more information. Once you have a server clients can be started in order to interact with the server. See Client CLI for more information. Design Client CLI The client CLI is a simple command line interface that allows the user to interact with the system. Server CLI The server CLI is a simple command line interface that allows the for creating a server in the system that can be used by clients in order to send messages to be retransmitted to other registered users. Project structure See Code Documentation for more information. Messages between Client <-> Server Client and server interchange messages in the form of JSONs. The JSONs are deserialized into code usable class objects that represent the messages. Because the messages are serialized into JSONs they can be sent over the network and deserialized into the same class objects on the other side. This allows for easy communication between the client and the server. A client must be logged in to send messages to the server. The server will then broadcast the message to all other registered users. Authentication The server has basic authentication with a user being able to: register login unregister logout The user is able to send messages to the server. The server will then broadcast on the moment the message to all other users that are registered. Messaegs are not stored by the server, just retransmitted, hence if a user is not online and logged in they will not receive the messages they have missed. Persistence Registered users are persisted into an SQLite3 database. This allows for the server to be restarted and still have the registered users. This allows for user login functionality. This also means that a username must be unique and not registered. Basic functionality of a UDP Multichat sequenceDiagram participant Client participant Server participant OtherRegisteredClients Client->>Server: Sends Authentication request Server->>Client: Sends Authentication response Client->>Server: Sends Message Server->>OtherRegisteredClients: Broadcasts Message Server->>Client: Sends Message Ack Possible client states sequenceDiagram participant Client participant Registered participant NotRegistered participant LoggedIn participant NotLoggedIn participant SendingMessage participant ReceivingChatMessage Client ->> Registered: Can be Client ->> NotRegistered: Can be Registered ->> LoggedIn: Logs in NotLoggedIn ->> LoggedIn: Logs in NotRegistered ->> Registered: Register Registered ->> NotLoggedIn: Can be LoggedIn ->> NotLoggedIn: Log out LoggedIn ->> NotRegistered: Unregister LoggedIn ->> SendingMessage: Sends a message LoggedIn ->> ReceivingChatMessage: Receives a message retransmission from the server Possible server states sequenceDiagram participant Server participant ListeningForMessages participant ListeningForAuthenticationRequests participant AnsweringAuthenticationRequests participant RetransmittingMessages Server ->> ListeningForMessages: Can be Server ->> ListeningForAuthenticationRequests: Can be ListeningForMessages ->> RetransmittingMessages: Receieves a message from a client ListeningForAuthenticationRequests ->> AnsweringAuthenticationRequests: Receives an authentication request from a client"
  },
  "server/examples.html": {
    "href": "server/examples.html",
    "title": "Examples of using the server | UDPChat",
    "keywords": "Examples of using the server This section contains examples of using the server. Server output The server will output information about what it is doing, for example when a user registers or logs in. Errors will also be outputted into STDERR. dotnet run --project UdpChat.Server/ Creating server with ports 5000 and 5001 Starting server Opening server database Users table created with 0 changes Retransmission server started at 127.0.0.1:5001 Authentication server started at 127.0.0.1:5000 Received request from 127.0.0.1:4000: Request(REGISTER,nico,nico,14/6/2023 17:41:57) Register SQL operation INSERT INTO users (username, password, ip_address, port) VALUES (@username, @password, @ip_address, @port) Microsoft.Data.Sqlite.SqliteParameterCollection Sending register response RegisterResponse: REGISTER_SUCCESS to 127.0.0.1:4000 Sent 107 bytes Received request from 127.0.0.1:4000: Request(LOGIN,nico,nico,14/6/2023 17:42:50) Received login request from nico at 14/6/2023 17:42:50 User nico updated address and port Sent 105 bytes Received request from 127.0.0.1:4004: Request(REGISTER,bob,bob,14/6/2023 17:45:41) Register SQL operation INSERT INTO users (username, password, ip_address, port) VALUES (@username, @password, @ip_address, @port) Microsoft.Data.Sqlite.SqliteParameterCollection Sending register response RegisterResponse: REGISTER_SUCCESS to 127.0.0.1:4004 Sent 107 bytes Received request from 127.0.0.1:4004: Request(LOGIN,bob,bob,14/6/2023 17:45:47) Received login request from bob at 14/6/2023 17:45:47 User bob updated address and port Sent 106 bytes Received message from bob@127.0.0.1:4004 at 14/6/2023 17:45:53: Hola a todos Retransmitting message to all 1 registered users Retransmitting message to nico@127.0.0.1:4001 Sent 116 bytes to 127.0.0.1:4001 Sending response to bob@127.0.0.1:4004 Sent 88 bytes to 127.0.0.1:4004 ^CStopping server and related services Closing database connection Exited successfully Error logging Logging errors can be achieved by redirecting STDERR to a file. dotnet run --project UdpChat.Server/ 2> errorfile.txt"
  },
  "server/index.html": {
    "href": "server/index.html",
    "title": "Server CLI Documentation | UDPChat",
    "keywords": "Server CLI Documentation This CLI launches a server that can be used for the UDPChat client. Table of contents Server CLI Documentation Table of contents Usage Default settings Custom settings Usage Available argunents are: -p or --port: The port the server will listen on. Default is 5000. NOTE: The server uses two ports, so the specified port and port + 1 will be used. To exit the server in a controlled manner press Ctrl + C. This will ensure the server closes its opened resources in an orderly fashion. Default settings dotnet run --project UdpChat.Server/ Creating server with ports 5000 and 5001 Starting server Opening server database Users table created with 0 changes Retransmission server started at 127.0.0.1:5001 Authentication server started at 127.0.0.1:5000 Custom settings dotnet run --port 6000 --project UdpChat.Server/ Creating server with ports 6000 and 6001 Starting server Opening server database Users table created with 0 changes Retransmission server started at 127.0.0.1:6001 Authentication server started at 127.0.0.1:6000 NOTE: If using the dotnet cli to run the server, if the server is run with the --project flag argyments for the server must be right after dotnet run [server_args] --project <project> [dotnet_args]."
  }
}